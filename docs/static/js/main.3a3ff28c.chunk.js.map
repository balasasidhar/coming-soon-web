{"version":3,"sources":["components/StaticCard.jsx","components/AnimatedCard.jsx","components/FlipUnitContainer.jsx","components/FlipClock.jsx","components/AppHeader.jsx","App.jsx","serviceWorker.js","index.js"],"names":["StaticCard","_ref","position","digit","react_default","a","createElement","className","AnimatedCard","animation","concat","FlipUnitContainer","shuffle","units","currentDigit","nextDigit","digit1","digit2","animation1","animation2","components_StaticCard","components_AnimatedCard","RELEASE_DATE","moment","add","FlipClock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","days","daysShuffle","hours","hoursShuffle","minutes","minutesShuffle","seconds","secondsShuffle","_this2","timerID","setInterval","updateTime","clearInterval","releaseDate","now","diff","temp","utc","setState","_this$state","components_FlipUnitContainer","Component","AppHeader","App","components_AppHeader","FlipClock_FlipClock","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAWeA,EAVI,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,SAAUC,EAAYF,EAAZE,MAC5B,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,GACZE,EAAAC,EAAAC,cAAA,YAAOH,KCMJK,EAVM,SAAAP,GAAoC,IAAjCC,EAAiCD,EAAjCC,SAAUO,EAAuBR,EAAvBQ,UAAWN,EAAYF,EAAZE,MAC3C,OAEEC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAG,OAAcR,EAAd,KAAAQ,OAA0BD,IACtCL,EAAAC,EAAAC,cAAA,YAAOH,KC+CEQ,EAjDW,SAAAV,GAA+B,IAA5BE,EAA4BF,EAA5BE,MAAOS,EAAqBX,EAArBW,QAASC,EAAYZ,EAAZY,MAGrCC,EAAeX,EACfY,EAAYZ,EAAQ,EAGpBW,EAAe,KACfA,EAAY,IAAAJ,OAAOI,IAEnBC,EAAY,KACZA,EAAS,IAAAL,OAAOK,IAIpB,IAAMC,EAASJ,EAAUG,EAAYD,EAC/BG,EAAUL,EAAsBE,EAAZC,EAGpBG,EAAaN,EAAU,OAAS,SAChCO,EAAcP,EAAmB,SAAT,OAE9B,OAEIR,EAAAC,EAAAC,cAAA,OAAKC,UAAW,qBACZH,EAAAC,EAAAC,cAACc,EAAD,CACIlB,SAAU,YACVC,MAAOW,IAEXV,EAAAC,EAAAC,cAACc,EAAD,CACIlB,SAAU,YACVC,MAAOY,IAEXX,EAAAC,EAAAC,cAACe,EAAD,CACInB,SAAU,QACVC,MAAOa,EACPP,UAAWS,IAEfd,EAAAC,EAAAC,cAACe,EAAD,CACInB,SAAU,SACVC,MAAOc,EACPR,UAAWU,IAEff,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASM,KC1C7BS,GAAe,IAAIC,KAASC,IAAI,KAAM,QAEvBC,cAEjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,KAAM,EACNC,aAAa,EACbC,MAAO,EACPC,cAAc,EACdC,QAAS,EACTC,gBAAgB,EAChBC,QAAS,EACTC,gBAAgB,GAVLf,mFAcC,IAAAgB,EAAAb,KAChBA,KAAKc,QAAUC,YACX,kBAAMF,EAAKG,cACX,mDAKJC,cAAcjB,KAAKc,8CAInB,IAAMI,EAAc,IAAIzB,IAAOD,GAEzB2B,EAAM1B,MAEN2B,EAAOF,EAAYE,KAAKD,GAExBE,EAAO5B,IAAO6B,IAAIF,GAElBf,EAAOa,EAAYE,KAAKD,EAAK,QAC7BZ,EAAQc,EAAKd,QACbE,EAAUY,EAAKZ,UACfE,EAAUU,EAAKV,UAErB,GAAIN,IAASL,KAAKI,MAAMC,KAAM,CAC1B,IAAMC,GAAeN,KAAKI,MAAME,YAChCN,KAAKuB,SAAS,CACVlB,OACAC,gBAIR,GAAIC,IAAUP,KAAKI,MAAMG,MAAO,CAC5B,IAAMC,GAAgBR,KAAKI,MAAMI,aACjCR,KAAKuB,SAAS,CACVhB,QACAC,iBAIR,GAAIC,IAAYT,KAAKI,MAAMK,QAAS,CAChC,IAAMC,GAAkBV,KAAKI,MAAMM,eACnCV,KAAKuB,SAAS,CACVd,UACAC,mBAIR,GAAIC,IAAYX,KAAKI,MAAMO,QAAS,CAChC,IAAMC,GAAkBZ,KAAKI,MAAMQ,eACnCZ,KAAKuB,SAAS,CACVZ,UACAC,qDAKH,IAAAY,EAYDxB,KAAKI,MARLC,EAJCmB,EAIDnB,KACAE,EALCiB,EAKDjB,MACAE,EANCe,EAMDf,QACAE,EAPCa,EAODb,QACAL,EARCkB,EAQDlB,YACAE,EATCgB,EASDhB,aACAE,EAVCc,EAUDd,eACAE,EAXCY,EAWDZ,eAGJ,OAEItC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACZH,EAAAC,EAAAC,cAACiD,EAAD,CACIpD,MAAOgC,EACPvB,QAASwB,EACTvB,MAAM,SAEVT,EAAAC,EAAAC,cAACiD,EAAD,CACIpD,MAAOkC,EACPzB,QAAS0B,EACTzB,MAAM,UAEVT,EAAAC,EAAAC,cAACiD,EAAD,CACIpD,MAAOoC,EACP3B,QAAS4B,EACT3B,MAAM,YAEVT,EAAAC,EAAAC,cAACiD,EAAD,CACIpD,MAAOsC,EACP7B,QAAS8B,EACT7B,MAAM,oBA7Ga2C,aCKxBC,EAVG,WACd,OAEIrD,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,qCCWGoD,EAXH,WACV,OAEEtD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqD,EAAD,MACAvD,EAAAC,EAAAC,cAACsD,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3a3ff28c.chunk.js","sourcesContent":["import React from 'react';\nconst StaticCard = ({ position, digit }) => {\n    return (\n        /* jshint ignore : start */\n        <div className={position}>\n            <span>{digit}</span>\n        </div>\n        /* jshint ignore : end */\n    );\n};\n\nexport default StaticCard;","import React from 'react';\nconst AnimatedCard = ({ position, animation, digit }) => {\n  return (\n    /* jshint ignore : start */\n    <div className={`flipCard ${position} ${animation}`}>\n      <span>{digit}</span>\n    </div>\n    /* jshint ignore : end */\n  );\n};\n\nexport default AnimatedCard;","import React from 'react';\nimport StaticCard from './StaticCard';\nimport AnimatedCard from './AnimatedCard';\nconst FlipUnitContainer = ({ digit, shuffle, units }) => {\n\n    // assign digit values\n    let currentDigit = digit;\n    let nextDigit = digit + 1;\n\n    // add zero\n    if (currentDigit < 10) {\n        currentDigit = `0${currentDigit}`;\n    }\n    if (nextDigit < 10) {\n        nextDigit = `0${nextDigit}`;\n    }\n\n    // shuffle digits\n    const digit1 = shuffle ? nextDigit : currentDigit;\n    const digit2 = !shuffle ? nextDigit : currentDigit;\n\n    // shuffle animations\n    const animation1 = shuffle ? 'fold' : 'unfold';\n    const animation2 = !shuffle ? 'fold' : 'unfold';\n\n    return (\n        /* jshint ignore : start */\n        <div className={'flipUnitContainer'}>\n            <StaticCard\n                position={'upperCard'}\n                digit={currentDigit}\n            />\n            <StaticCard\n                position={'lowerCard'}\n                digit={nextDigit}\n            />\n            <AnimatedCard\n                position={'first'}\n                digit={digit1}\n                animation={animation1}\n            />\n            <AnimatedCard\n                position={'second'}\n                digit={digit2}\n                animation={animation2}\n            />\n            <h4 className=\"label\">{units}</h4>\n        </div>\n        /* jshint ignore : end */\n    );\n};\n\nexport default FlipUnitContainer;","import React, { Component } from 'react';\nimport moment from 'moment';\nimport FlipUnitContainer from './FlipUnitContainer';\n\nconst RELEASE_DATE = new moment().add('30', 'days');\n\nexport default class FlipClock extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            days: 0,\n            daysShuffle: true,\n            hours: 0,\n            hoursShuffle: true,\n            minutes: 0,\n            minutesShuffle: true,\n            seconds: 0,\n            secondsShuffle: true\n        };\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.updateTime(),\n            50\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    updateTime() {\n        const releaseDate = new moment(RELEASE_DATE);\n        // get current date\n        const now = moment();\n        // calculate difference b/w current date & release date\n        const diff = releaseDate.diff(now);\n\n        const temp = moment.utc(diff);\n        // set time units\n        const days = releaseDate.diff(now, 'days');\n        const hours = temp.hours();\n        const minutes = temp.minutes();\n        const seconds = temp.seconds();\n        // on hour chanage, update days and shuffle state\n        if (days !== this.state.days) {\n            const daysShuffle = !this.state.daysShuffle;\n            this.setState({\n                days,\n                daysShuffle\n            });\n        }\n        // on hour chanage, update hours and shuffle state\n        if (hours !== this.state.hours) {\n            const hoursShuffle = !this.state.hoursShuffle;\n            this.setState({\n                hours,\n                hoursShuffle\n            });\n        }\n        // on minute chanage, update minutes and shuffle state\n        if (minutes !== this.state.minutes) {\n            const minutesShuffle = !this.state.minutesShuffle;\n            this.setState({\n                minutes,\n                minutesShuffle\n            });\n        }\n        // on second chanage, update seconds and shuffle state\n        if (seconds !== this.state.seconds) {\n            const secondsShuffle = !this.state.secondsShuffle;\n            this.setState({\n                seconds,\n                secondsShuffle\n            });\n        }\n    }\n\n    render() {\n\n        // state object destructuring\n        const {\n            days,\n            hours,\n            minutes,\n            seconds,\n            daysShuffle,\n            hoursShuffle,\n            minutesShuffle,\n            secondsShuffle\n        } = this.state;\n\n        return (\n            /* jshint ignore : start */\n            <div className={'flipClock'}>\n                <FlipUnitContainer\n                    digit={days}\n                    shuffle={daysShuffle}\n                    units=\"Days\"\n                />\n                <FlipUnitContainer\n                    digit={hours}\n                    shuffle={hoursShuffle}\n                    units=\"Hours\"\n                />\n                <FlipUnitContainer\n                    digit={minutes}\n                    shuffle={minutesShuffle}\n                    units=\"Minutes\"\n                />\n                <FlipUnitContainer\n                    digit={seconds}\n                    shuffle={secondsShuffle}\n                    units=\"Seconds\"\n                />\n            </div>\n            /* jshint ignore : end */\n        );\n    }\n}","import React from 'react';\nconst AppHeader = () => {\n    return (\n        /* jshint ignore : start */\n        <header>\n            <h1>We're Coming Soon In </h1>\n        </header>\n        /* jshint ignore : end */\n    );\n};\n\nexport default AppHeader;","import React from 'react';\nimport './App.sass';\nimport FlipClock from './components/FlipClock';\nimport AppHeader from './components/AppHeader';\n\nconst App = () => {\n  return (\n    /* jshint ignore : start */\n    <div>\n      <AppHeader />\n      <FlipClock />\n    </div>\n    /* jshint ignore : end */\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/* jshint ignore : start */\nReactDOM.render(<App />, document.getElementById('root'));\n/* jshint ignore : end */\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}